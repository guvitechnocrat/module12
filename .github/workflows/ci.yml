name: DevSecOps-CI
on: [push, pull_request]
jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    env:
      VAULT_ADDR: http://localhost:8200      # in lab; in real use point to your Vault
    steps:
      - uses: actions/checkout@v4

      # 1) Login to Vault (AppRole or token) and fetch CI secrets
      - name: Login to Vault and fetch secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ env.VAULT_ADDR }}
          method: token
          token: ${{ secrets.VAULT_DEV_TOKEN }}
          secrets: |
            secret/data/ci#SONAR_TOKEN:SONAR_TOKEN
            secret/data/ci#SNYK_TOKEN:SNYK_TOKEN

      # 2) Run SonarScanner (example with Docker CLI scanner)
      - name: Build project (mvn example)
        run: mvn -B -DskipTests package

      - name: Run Sonar Scanner (Docker)
        run: |
          docker run --rm \
            -e SONAR_HOST_URL="http://host.docker.internal:9000" \
            -e SONAR_LOGIN="${{ env.SONAR_TOKEN }}" \
            -v "${{ github.workspace }}":/usr/src sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey=${{ github.repository }} -Dsonar.sources=.

      # 3) Build Docker image (for Trivy scan)
      - name: Build container image
        run: docker build -t demo-app:${{ github.sha }} .

      # 4) Trivy container scan (official GitHub Action)
      - name: Trivy scan image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: demo-app:${{ github.sha }}
          format: 'json'
          exit-code: '1'   # fail on vulnerabilities above threshold
